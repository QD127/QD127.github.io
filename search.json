[{"title":"来时的路","path":"/2025/02/01/来时的路/","content":"Q：使用hexo和github搭建个s:人网站 A： 使用 Hexo 和 GitHub 搭建个人网站是一个常见的做法，Hexo 是一个快速、简洁的静态博客框架，而 GitHub Pages 提供了免费的静态网站托管服务。以下是详细的步骤： 1. 安装 Node.js 和 Git首先，确保你的系统上已经安装了 Node.js 和 Git。 Node.js: 下载并安装 Node.js Git: 下载并安装 Git 安装完成后，可以通过以下命令检查是否安装成功： 123node -vnpm -vgit --version 2. 安装 Hexo使用 npm 安装 Hexo： 1npm install -g hexo-cli 安装完成后，可以通过以下命令检查 Hexo 是否安装成功： 1hexo -v 3. 初始化 Hexo 项目创建一个新的 Hexo 项目： 12hexo init my-blogcd my-blog 这会在当前目录下生成一个名为 my-blog 的文件夹，里面包含了 Hexo 的基本文件结构。 #原来终端也可以cd过去（大惊） 4. 安装依赖进入项目目录并安装依赖： 1npm install 5. 本地预览启动本地服务器，预览你的网站： 1hexo server 然后在浏览器中访问 http://localhost:4000，你应该可以看到默认的 Hexo 页面。 6. 配置 GitHub Pages首先，在 GitHub 上创建一个新的仓库，仓库名必须为 你的用户名.github.io（例如，如果你的 GitHub 用户名是 john，那么仓库名应该是 john.github.io）。 7. 配置 Hexo 部署在 Hexo 项目的根目录下找到 _config.yml 文件，编辑 deploy 部分： 1234deploy: type: git repo: https://github.com/你的用户名/你的用户名.github.io.git branch: main 8. 安装 Hexo 部署插件安装 hexo-deployer-git 插件： 1npm install hexo-deployer-git --save 9. 生成静态文件并部署生成静态文件并部署到 GitHub Pages： 123hexo cleanhexo generatehexo deploy 10. 访问你的网站部署完成后，访问 https://你的用户名.github.io，你应该可以看到你的个人网站。 11. 自定义你的网站你可以通过编辑 _config.yml 文件来配置你的网站，或者通过安装主题来改变网站的外观。Hexo 社区有很多优秀的主题可供选择，你可以在 Hexo 主题页面 找到你喜欢的主题。 12. 更新内容每次更新内容后，只需重复以下步骤即可： 123hexo cleanhexo generatehexo deploy 13. 使用自定义域名（可选）如果你有自己的域名，可以通过在 GitHub Pages 的设置中添加自定义域名，并在你的域名管理面板中配置 DNS 记录，将域名指向 GitHub Pages。 14. 备份你的 Hexo 项目（可选）为了确保你的 Hexo 项目安全，你可以将整个项目推送到 GitHub 的另一个仓库中进行备份。 12345git initgit remote add origin https://github.com/你的用户名/你的项目名.gitgit add .git commit -m &quot;Initial commit&quot;git push -u origin main 总结通过以上步骤，你已经成功使用 Hexo 和 GitHub Pages 搭建了一个个人网站。你可以随时更新内容、更换主题，甚至使用自定义域名来进一步提升你的网站。"},{"title":"你好世界喵（第一次尝试）","path":"/2025/01/31/你好世界喵/","content":"LSTM（长短时记忆网络） RNN：实际上就是一个带有 记忆的时间序列的预测模型 缺点：梯度消失和梯度爆炸 ↓ LSTM：LSTM（长短时记忆网络）是一种常用于处理序列数据的深度学习模型，与传统的 RNN（循环神经网络）相比，LSTM引入了三个门（ 输入门、遗忘门、输出门）和一个 细胞状态（cell state）， 使得LSTM能够更好地处理序列中的长期依赖关系。 遗忘门：通过x和ht的操作，并经过sigmoid函数，得到0,1的向量，0对应的就代表之前的记忆某一部分要忘记，1对应的就代表之前的记忆需要留下的部分 &#x3D;&#x3D;&#x3D;&gt;代表复习上一门线性代数所包含的记忆，通过遗忘门，忘记掉和下一门高等数学无关的内容（比如矩阵的秩） 输入门：通过将之前的需要留下的信息和现在需要记住的信息相加，也就是得到了新的记忆状态。&#x3D;&#x3D;&#x3D;&gt;代表复习下一门科目高等数学的时候输入的一些记忆（比如洛必达法则等等），那么已经线性代数残余且和高数相关的部分（比如数学运算）+高数的知识&#x3D;新的记忆状态 输出门：整合，得到一个输出&#x3D;&#x3D;&#x3D;&gt;代表高数所需要的记忆，但是在实际的考试不一定全都发挥出来考到100分。因此，则代表实际的考试分数 LSTM确实是可以在一定程度上解决梯度消失和梯度爆炸的问题 ResNet（残差神经网络） 残差神经网络的主要贡献是发现了“退化现象（Degradation）”，并针对退化现象发明了 “直连边&#x2F;短连接（Shortcut connection）” 简单地增加深度，会导致梯度弥散或梯度爆炸。 ResNet论文提出通过数据的预处理以及在网络中使用 BN（Batch Normalization）层来解决 为了解决深层网络中的退化问题，可以人为地让神经网络某些层跳过下一层神经元的连接，隔层相连，弱化每层之间的强联系。这种神经网络被称为残差网络 (ResNets) U-net 语义分割的目的是判断每个像素点的类别，进行精确的分割 eg自动驾驶中的分割任务的分割结果，可以从一张图片中有效的识别出汽车（深蓝色），行人（红色），红绿灯（黄色），道路（浅紫色）等 编码器中的卷积逐步提取特征（深度增加），maxpool降低空间分辨率（高宽减少） 解码器通过上采样（反卷积）高宽加倍，深度减半；通过卷积降低拼接特征的深度 UNet的关键创新是在解码器中引入了跳跃连接（Skip Connection），即将编码器中的特征图 与解码器中对应的特征图进行连接。这种跳跃连接可以帮助解码器更好地利用不同层次的特征信息，从而提高图像分割的准确性和细节保留能力 GAN（生成对抗网络） 生成对抗网络其实是两个网络的组合：生成网络(Generator)负责生成模拟数据；判别网络(Discriminator)负责判断输入的数据是真实的还是生成的。生成网络要不断优化自己生成的数据让判别网络判断不出来，判别网络也要优化自己让自己判断得更准确。二者关系形成对抗，因此叫对抗网络。 *G是一个生成图片的网络 它接收一个随机的噪声z,通过这个噪声生成图片 叫做G(z) *D是一个判别网络 判别一张图片是不是真实的 它的输入参数是x x代表一张图片 输出D(x)代表x为真实图片的概率 如果为1 那就代表100%是真实的图片 如果输出为0 那就代表不可能是真实的图片 在训练过程中 将随机噪声输入生成网络G,得到生成的图片; 判别器接收生成的图片和真实的图片 并尽量将两者区分开来 在这个计算过程中 能否正确区分生成的图片和真实的图片将作为判别器的损失 而能否生成近似真实的图片并使得判别器将生成的个图片判定为真将作为生成器的损失 生成器的损失是通过判别器的输出来计算的 而判别器的输出是一个概率值"},{"title":"Hello World","path":"/2025/01/31/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]